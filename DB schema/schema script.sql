DROP SCHEMA IF EXISTS BOOKSTORE;

CREATE SCHEMA BOOKSTORE;

USE BOOKSTORE;

# Books, publishers, and Authors tables.

## PUBILSHERS TABLES
# Check https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate%28java.lang.String,%20int%29
# To obtain auto generated ID after insert.
CREATE TABLE IF NOT EXISTS PUBLISHERS (
	PUBLISHER_ID	        INT NOT NULL AUTO_INCREMENT,
    PUBLISHER_NAME	        VARCHAR(45) NOT NULL,

    PRIMARY KEY (PUBLISHER_ID)
);

CREATE TABLE IF NOT EXISTS PUBLISHERS_PHONES (
	PUBLISHER_ID			INT NOT NULL,
    PUBLISHER_PHONE			VARCHAR(15) NOT NULL,
    
    UNIQUE(PUBLISHER_PHONE),
    PRIMARY KEY(PUBLISHER_ID, PUBLISHER_PHONE),
    FOREIGN KEY(PUBLISHER_ID) REFERENCES PUBLISHERS(PUBLISHER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS PUBLISHERS_ADDRESSES (
	PUBLISHER_ID			INT NOT NULL,
    PUBLISHER_ADDRESS		VARCHAR(35) NOT NULL,
    
    UNIQUE(PUBLISHER_ADDRESS),
    PRIMARY KEY(PUBLISHER_ID, PUBLISHER_ADDRESS),
    FOREIGN KEY(PUBLISHER_ID) REFERENCES PUBLISHERS(PUBLISHER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);
##

# Check https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate%28java.lang.String,%20int%29
# To obtain auto generated ID after insert.
CREATE TABLE IF NOT EXISTS AUTHORS (
	AUTHOR_ID	            INT NOT NULL AUTO_INCREMENT,
    AUTHOR_NAME	            VARCHAR(45) NOT NULL,

    PRIMARY KEY (AUTHOR_ID)
);

CREATE TABLE IF NOT EXISTS BOOKS (
	BOOK_ISBN               VARCHAR(15) NOT NULL,
    BOOK_TITLE	            VARCHAR(45) NOT NULL,
    PUBLICATION_YEAR	    YEAR NOT NULL,
    SELLING_PRICE	        DECIMAL(6, 2) NOT NULL,
    BOOK_CATEGORY	        VARCHAR(9) NOT NULL,
    
    PRIMARY KEY (BOOK_ISBN)
);

CREATE TABLE IF NOT EXISTS BOOK_PUBLISHERS (
	BOOK_ISBN 	            VARCHAR(15) NOT NULL,
    PUBLISHER_ID	        INT NOT NULL,
    
    PRIMARY KEY(BOOK_ISBN),
    FOREIGN KEY(BOOK_ISBN) REFERENCES BOOKS(BOOK_ISBN) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(PUBLISHER_ID) REFERENCES PUBLISHERS(PUBLISHER_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS BOOK_AUTHORS (
	BOOK_ISBN				VARCHAR(15) NOT NULL,
    AUTHOR_ID	     		INT NOT NULL,
    
    PRIMARY KEY(BOOK_ISBN, AUTHOR_ID),
    FOREIGN KEY(BOOK_ISBN) REFERENCES BOOKS(BOOK_ISBN) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(AUTHOR_ID) REFERENCES AUTHORS(AUTHOR_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

###########################################################################

# Check https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate%28java.lang.String,%20int%29
# To obtain auto generated ID after insert.
CREATE TABLE IF NOT EXISTS BOOK_ORDER(
	ORDER_ID				INT NOT NULL AUTO_INCREMENT,
	BOOK_ISBN				VARCHAR(15) NOT NULL,
    QUANTITY				INT NOT NULL,
    ISSUE_TIME				TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY(ORDER_ID),
    FOREIGN KEY(BOOK_ISBN) REFERENCES BOOKS(BOOK_ISBN) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS COMPLETE_ORDERS(
	ORDER_ID				INT NOT NULL,
	BOOK_ISBN				VARCHAR(15) NOT NULL,
    QUANTITY				INT NOT NULL,
    ISSUE_TIME				TIMESTAMP NOT NULL,
    COMPLETE_TIME			TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY(ORDER_ID),
    FOREIGN KEY(BOOK_ISBN) REFERENCES BOOKS(BOOK_ISBN) ON DELETE CASCADE ON UPDATE CASCADE
);


###########################################################################

# User table, It uses SHA1 hashing algorithm for the password.

CREATE TABLE IF NOT EXISTS USERS(
	USER_NAME				VARCHAR(20) NOT NULL,
    FIRST_NAME				VARCHAR(20) NOT NULL,
    LAST_NAME				VARCHAR(20) NOT NULL,
    EMAIL					VARCHAR(20) NOT NULL,
    PASSWORD_SHA1			VARCHAR(40) NOT NULL,
    PHONE_NUMBER			VARCHAR(15) NOT NULL,
    ADDRESS					VARCHAR(35) NOT NULL,
    IS_MANAGER				TINYINT(1) DEFAULT 0,
    
    PRIMARY KEY(USER_NAME),
    UNIQUE(EMAIL)
);

# Check https://docs.oracle.com/javase/6/docs/api/java/sql/Statement.html#executeUpdate%28java.lang.String,%20int%29
# To obtain auto generated ID after insert.
CREATE TABLE IF NOT EXISTS SHOPPING_ORDER (
	SHOPPING_ORDER_ID		INT NOT NULL AUTO_INCREMENT,
	USER_NAME				VARCHAR(20) NOT NULL,
    CHECKOUT_TIME			TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    PRIMARY KEY(SHOPPING_ORDER_ID),
    FOREIGN KEY(USER_NAME) REFERENCES USERS(USER_NAME) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS SHOPPING_ORDER_ITEMS (
	SHOPPING_ORDER_ID		INT NOT NULL,
    BOOK_ISBN				VARCHAR(20) NOT NULL,
    QUANTITY				INT DEFAULT 1,
    
    PRIMARY KEY(SHOPPING_ORDER_ID, BOOK_ISBN),
    FOREIGN KEY(SHOPPING_ORDER_ID) REFERENCES SHOPPING_ORDER(SHOPPING_ORDER_ID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(BOOK_ISBN) REFERENCES BOOKS(BOOK_ISBN) ON DELETE CASCADE ON UPDATE CASCADE
);